<
This is a basic lex and parser design for a compiler
>


/* Variable declaration portion

PURFRAC_NUM _a  , _b ; eol
PURFRAC_NUM _c ; eol


/*expression execution portion
_a = 12 + 3 eol
12 + 3 eol
_c = 12 * 3 + 2 eol
_c = 12 / 3 eol
_a = 12 / 0 eol

_c = 12 % 3 eol

_c = 12 % 0 eol
/* If-else and nested if-else statement execution portion

IF ( _a = 12 + 1 ) { _a = 12 } eol

IF (  12 + 1 )  { _a = 13 } eol

IF ( _a = 12 + 1 )
   { _b = 22 - 1   }
 ELSE 
   { _b = 22 + 1 } eol


IF ( _a = 12 + 1 ) 
    { 
    IF ( _a = 12 + 1 )  { _b = 23 + 1   } 
    ELSE { _b = 22 + 1 }  
    } 
ELSE { _b = 22 + 1 } eol

/*IF-ELSE with more than one expression
IF ( _a = 12 + 1 ) 
    { 
    IF ( _a = 12 + 1 ) 
     { _b = 23 + 1 ,
      _a = 12    } 
    ELSE { _b = 22 + 1 }  
    } 
ELSE { _b = 22 + 1 } eol

/* LOOP 
LOOP ( _a  =  1 ; _a < 10 ; _a = _a + 1  ) {
    IF ( _a = 12 + 1 ) 
    { 
    IF ( _a = 12 + 1 ) 
     { _b = 23 + 1 ,
      _a = 12    } 
    ELSE { _b = 22 + 1 }  
    } 
    ELSE { _b = 22 + 1 }  
} eol


LOOP ( _a  =  1 ; _a < 10 ; _a = _a + 1  ) {
    _a = 12 * 36 * 12 
} eol


/* FUNCTION
PURFRAC_NUM FUNCTION Sum {
  LOOP ( _a  =  1 ; _a < 10 ; _a = _a + 8  ) {
    _a = 12 * 36 * 12 
}  
} RETURN eol

PURFRAC_NUM FUNCTION If {
  _a = 12 + 1
} RETURN eol

PURFRAC_NUM _abc ; eol